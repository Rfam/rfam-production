"""
Copyright [2009-2016] EMBL-European Bioinformatics Institute
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

# -----------------------------------IMPORTS-----------------------------------

import os
import sys
import json

# -----------------------------------GLOBALS-----------------------------------

DOMAINS = ["bacteria", "archaea", "eukaryota", "viruses"]


# -----------------------------------------------------------------------------


def domain_download_validator(domain_dir, filename=None):
    """
    Lists all proteome directories in dest_dir and creates a list
    of the genomes that were not downloaded successfully. If filename
    is provided then the Upids will be listed in filename.list

    domain_dir: Destination directory, could be one of the four domains
    filename: The filename for the UPID list/ validation report
    returns: None if filename is provided otherwise it will return a list
    of upids
    """

    recovery_list = []
    recovery_file = None

    updirs = os.listdir(domain_dir)

    for updir in updirs:
        lsf_output_file = os.path.join(domain_dir, os.path.join(updir, "download.out"))
        status = check_download_status(lsf_output_file)
        if status == 0:
            recovery_list.append(updir)

    if filename is not None:
        recovery_file = open(os.path.join(domain_dir, filename + '.list'))
        for upid in recovery_list:
            recovery_file.write(upid + '\n')

    else:
        return recovery_list

    return None


# -----------------------------------------------------------------------------


def check_download_status(lsf_out_file):
    """
    Opens LSF output file and checks whether the job's status is success

    lsf_out_file: LSF platform's output file generated by -o option
    returns: status 1 if the download was successful, otherwise 0
    """

    infile_fp = open(lsf_out_file, 'r')

    status = 0

    for line in infile_fp:
        if line.find("Success") != -1:
            status = 1

    infile_fp.close()

    return status


# -----------------------------------------------------------------------------


def project_download_validator(project_dir, id_pairs_file=None, filename=None):
    """
    Loops over a genome download project directory and reports all the upids
    that need to be recovered

    project_dir: Destination directory of genome download pipeline
    id_pairs_file: A json file with all the UPids of the corresponding
    Uniprot's release. If None simply reports a list of UPIds
    filename: A name for the output file. "recovery.tsv" will be used otherwise

    returns: void
    """
    upids_to_recover = []

    sub_dirs = [x for x in os.listdir(project_dir) if x in DOMAINS]

    for sub_dir in sub_dirs:
        domain_dir_path = os.path.join(project_dir, sub_dir)
        upids_to_recover.extend(domain_download_validator(domain_dir_path,
                                                          filename=None))
        # would also be good to remove those genome dirs

    if filename is None:
        filename = "recovery"

    if len(upids_to_recover) != 0:
        fp_out = open(os.path.join(project_dir, filename + '.tsv'), 'w')

        if id_pairs_file is not None:
            fp_in = open(id_pairs_file, 'r')
            all_id_pairs = json.load(fp_in)
            fp_in.close()

            for upid in upids_to_recover:
                fp_out.write(upid + '\t' + str(all_id_pairs[upid]["GCA"]) +
                             '\t' + all_id_pairs[upid]["DOM"] + '\n')

        # list upids if the UPID/GCA pairs are not available
        else:
            for upid in upids_to_recover:
                fp_out.write(upid + '\n')

        fp_out.close()

    else:
        print "\nGenome Download Success!"


# -----------------------------------------------------------------------------

if __name__ == '__main__':

    project_dir = sys.argv[1]
    id_pairs_file = sys.argv[2]

    if len(sys.argv) > 3:
        filename = sys.argv[3]
        project_download_validator(project_dir, id_pairs_file, filename)

    else:
        project_download_validator(project_dir, id_pairs_file, filename=None)
