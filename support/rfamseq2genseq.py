"""
Copyright [2009-2017] EMBL-European Bioinformatics Institute
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

# -----------------------------------------------------------------------------

import os
import sys

# -----------------------------------------------------------------------------


def convert_rfamseq_to_genseq(rfamseq_file, dest_dir=None):
    """
    Converts an rfamseq file to genseq to map genome (upid) and sequence
    accessions

    :param rfamseq_file: A genome specific rfamseq file in the form of
    upid.rfamseq, as generated from rfamseq table

    returns: void
    """

    # store output in input file directory
    if dest_dir is None:
        dest_dir = os.path.split(rfamseq_file)[0]

    # get the input filename to keep track of the upids
    filename = os.path.basename(rfamseq_file).partition('.')[0]
    genseq_file = open(os.path.join(dest_dir, filename+'.genseq'), 'w')

    rfamseq_fp = open(rfamseq_file, 'r')

    for line in rfamseq_fp:
        line = line.strip().split('\t')
        genseq_file.write(filename + '\t' + line[0] + '\n')

    genseq_file.close()
    rfamseq_fp.close()

# -----------------------------------------------------------------------------


def generate_genseq_files_from_project_directory(project_dir, upid_input):
    """
    Generates genseq files directly in the directory where a particular
    genome is located

    project_dir: The path to a project directory as generated by genome_downloader
    upid_file: A file listing all upids for which to generate the genseq files

    return: void
    """

    if os.path.isfile(upid_input):
        fp = open(upid_input, 'r')
        upids = [x.strip() for x in fp]
        fp.close()

        # loop over all upids and generate
        for upid in upids:
            suffix = upid[-3:]
            subdir = os.path.join(project_dir, suffix)
            updir = os.path.join(subdir, upid)
            uprfamseq = os.path.join(updir, upid+'.rfamseq')

            if os.path.exists(uprfamseq):
                # dest_dir set to None so that genseq file is created
                # in the same directory as rfamseq
                convert_rfamseq_to_genseq(uprfamseq, dest_dir=None)

    else:
        # get rfamseq file
        suffix = upid_input[-3:]
        subdir = os.path.join(project_dir, suffix)
        updir = os.path.join(subdir, upid_input)
        uprfamseq = os.path.join(updir, upid_input + '.rfamseq')

        convert_rfamseq_to_genseq(uprfamseq, dest_dir=None)

# -----------------------------------------------------------------------------


def generate_genseq_files_from_common_directory(rfamseq_input, dest_dir=None):
    """
    Simple function to generate .genseq files from within the same directory

    rfamseq_input: The path to a directory containing multiple .rfamseq files
    or a single .rfamseq file
    dest_dir: The path to destination directory

    return:
    """
    # work on the destination directory
    if dest_dir is None:
        if os.path.isdir(rfamseq_input):
            dest_dir = rfamseq_input
        else:
            dest_dir = os.path.split(rfamseq_input)[0]

    if os.path.isdir(rfamseq_input):
        rfamseq_files = [x for x in os.listdir(rfamseq_input) if x.endswith('.rfamseq')]
        dest_dir = os.path.join(rfamseq_input, "genseq")

        if not os.path.exists(dest_dir):
            os.mkdir(dest_dir)

        for rfamseq_file in rfamseq_files:
            rfamseq_loc = os.path.join(rfamseq_input, rfamseq_file)
            convert_rfamseq_to_genseq(rfamseq_loc, dest_dir=dest_dir)

    elif os.path.isfile(rfamseq_input):
        convert_rfamseq_to_genseq(rfamseq_input, dest_dir=dest_dir)

    else:
        sys.exit("\nWrong input! Please provide an rfamseq file or dir.")


# -----------------------------------------------------------------------------


if __name__ == '__main__':

    if "--project" in sys.argv:
        project_dir = sys.argv[1]
        upid_list = sys.argv[2]

        generate_genseq_files_from_project_directory(project_dir, upid_list)

    else:
        # call generate_genseq_files_from_common_directory here
        pass